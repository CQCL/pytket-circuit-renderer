// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/

"use strict";


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Expression: peg$parseExpression };
  var peg$startRuleFunction = peg$parseExpression;

  var peg$c0 = "**";
  var peg$c1 = "(";
  var peg$c2 = ")";
  var peg$c3 = "-";
  var peg$c4 = "Abs";
  var peg$c5 = "ceiling";
  var peg$c6 = "floor";
  var peg$c7 = "factorial";
  var peg$c8 = "factorial2";
  var peg$c9 = "Sum";
  var peg$c10 = ",";
  var peg$c11 = "Product";
  var peg$c12 = "periodic_argument";
  var peg$c13 = "asinh";
  var peg$c14 = "acosh";
  var peg$c15 = "sech";
  var peg$c16 = "asin";
  var peg$c17 = "acsc";
  var peg$c18 = "acos";
  var peg$c19 = "asec";
  var peg$c20 = "atan2";
  var peg$c21 = "atan";
  var peg$c22 = "acot";
  var peg$c23 = "sinh";
  var peg$c24 = "cosh";
  var peg$c25 = "tanh";
  var peg$c26 = "coth";
  var peg$c27 = "csch";
  var peg$c28 = "sin";
  var peg$c29 = "csc";
  var peg$c30 = "cos";
  var peg$c31 = "sec";
  var peg$c32 = "cot";
  var peg$c33 = "re";
  var peg$c34 = "im";
  var peg$c35 = "sign";
  var peg$c36 = "arg";
  var peg$c37 = "conjugate";
  var peg$c38 = "polar_lift";
  var peg$c39 = "frac";
  var peg$c40 = "exp";
  var peg$c41 = "log";
  var peg$c42 = "Min";
  var peg$c43 = "Max";
  var peg$c44 = "sqrt(";
  var peg$c45 = "cbrt(";
  var peg$c46 = "root(";
  var peg$c47 = "~";
  var peg$c48 = "Implies(";
  var peg$c49 = "Equivalent(";
  var peg$c50 = "True";
  var peg$c51 = "False";
  var peg$c52 = "alpha";
  var peg$c53 = "beta";
  var peg$c54 = "gamma";
  var peg$c55 = "delta";
  var peg$c56 = "epsilon";
  var peg$c57 = "zeta";
  var peg$c58 = "eta";
  var peg$c59 = "theta";
  var peg$c60 = "iota";
  var peg$c61 = "kappa";
  var peg$c62 = "lamda";
  var peg$c63 = "mu";
  var peg$c64 = "nu";
  var peg$c65 = "xi";
  var peg$c66 = "omicron";
  var peg$c67 = "pi";
  var peg$c68 = "rho";
  var peg$c69 = "sigma";
  var peg$c70 = "tau";
  var peg$c71 = "upsilon";
  var peg$c72 = "phi";
  var peg$c73 = "chi";
  var peg$c74 = "psi";
  var peg$c75 = "omega";
  var peg$c76 = "Alpha";
  var peg$c77 = "Beta";
  var peg$c78 = "Gamma";
  var peg$c79 = "Delta";
  var peg$c80 = "Epsilon";
  var peg$c81 = "Zeta";
  var peg$c82 = "Eta";
  var peg$c83 = "Theta";
  var peg$c84 = "Iota";
  var peg$c85 = "Kappa";
  var peg$c86 = "Lamda";
  var peg$c87 = "Mu";
  var peg$c88 = "Nu";
  var peg$c89 = "Xi";
  var peg$c90 = "Omicron";
  var peg$c91 = "Pi";
  var peg$c92 = "Rho";
  var peg$c93 = "Sigma";
  var peg$c94 = "Tau";
  var peg$c95 = "Upsilon";
  var peg$c96 = "Phi";
  var peg$c97 = "Chi";
  var peg$c98 = "Psi";
  var peg$c99 = "Omega";
  var peg$c100 = "oo";
  var peg$c101 = "EmptySet";
  var peg$c102 = ".";

  var peg$r0 = /^[+\-]/;
  var peg$r1 = /^[*\/]/;
  var peg$r2 = /^[a-z]/i;
  var peg$r3 = /^[&\^|]/;
  var peg$r4 = /^[0-9]/;
  var peg$r5 = /^[ \t\n\r]/;

  var peg$e0 = peg$otherExpectation("additive");
  var peg$e1 = peg$classExpectation(["+", "-"], false, false);
  var peg$e2 = peg$otherExpectation("multiplicative");
  var peg$e3 = peg$classExpectation(["*", "/"], false, false);
  var peg$e4 = peg$otherExpectation("exponential");
  var peg$e5 = peg$literalExpectation("**", false);
  var peg$e6 = peg$literalExpectation("(", false);
  var peg$e7 = peg$literalExpectation(")", false);
  var peg$e8 = peg$otherExpectation("special unary func");
  var peg$e9 = peg$literalExpectation("-", false);
  var peg$e10 = peg$literalExpectation("Abs", false);
  var peg$e11 = peg$literalExpectation("ceiling", false);
  var peg$e12 = peg$literalExpectation("floor", false);
  var peg$e13 = peg$literalExpectation("factorial", false);
  var peg$e14 = peg$literalExpectation("factorial2", false);
  var peg$e15 = peg$otherExpectation("Big Sigma");
  var peg$e16 = peg$literalExpectation("Sum", false);
  var peg$e17 = peg$literalExpectation(",", false);
  var peg$e18 = peg$otherExpectation("Big Pi");
  var peg$e19 = peg$literalExpectation("Product", false);
  var peg$e20 = peg$otherExpectation("function name");
  var peg$e21 = peg$literalExpectation("periodic_argument", false);
  var peg$e22 = peg$literalExpectation("asinh", false);
  var peg$e23 = peg$literalExpectation("acosh", false);
  var peg$e24 = peg$literalExpectation("sech", false);
  var peg$e25 = peg$literalExpectation("asin", false);
  var peg$e26 = peg$literalExpectation("acsc", false);
  var peg$e27 = peg$literalExpectation("acos", false);
  var peg$e28 = peg$literalExpectation("asec", false);
  var peg$e29 = peg$literalExpectation("atan2", false);
  var peg$e30 = peg$literalExpectation("atan", false);
  var peg$e31 = peg$literalExpectation("acot", false);
  var peg$e32 = peg$literalExpectation("sinh", false);
  var peg$e33 = peg$literalExpectation("cosh", false);
  var peg$e34 = peg$literalExpectation("tanh", false);
  var peg$e35 = peg$literalExpectation("coth", false);
  var peg$e36 = peg$literalExpectation("csch", false);
  var peg$e37 = peg$literalExpectation("sin", false);
  var peg$e38 = peg$literalExpectation("csc", false);
  var peg$e39 = peg$literalExpectation("cos", false);
  var peg$e40 = peg$literalExpectation("sec", false);
  var peg$e41 = peg$literalExpectation("cot", false);
  var peg$e42 = peg$literalExpectation("re", false);
  var peg$e43 = peg$literalExpectation("im", false);
  var peg$e44 = peg$literalExpectation("sign", false);
  var peg$e45 = peg$literalExpectation("arg", false);
  var peg$e46 = peg$literalExpectation("conjugate", false);
  var peg$e47 = peg$literalExpectation("polar_lift", false);
  var peg$e48 = peg$literalExpectation("frac", false);
  var peg$e49 = peg$literalExpectation("exp", false);
  var peg$e50 = peg$literalExpectation("log", false);
  var peg$e51 = peg$literalExpectation("Min", false);
  var peg$e52 = peg$literalExpectation("Max", false);
  var peg$e53 = peg$otherExpectation("arbitrary function name");
  var peg$e54 = peg$classExpectation([["a", "z"]], false, true);
  var peg$e55 = peg$otherExpectation("nth-root");
  var peg$e56 = peg$literalExpectation("sqrt(", false);
  var peg$e57 = peg$literalExpectation("cbrt(", false);
  var peg$e58 = peg$literalExpectation("root(", false);
  var peg$e59 = peg$otherExpectation("named functions");
  var peg$e60 = peg$otherExpectation("logical expression");
  var peg$e61 = peg$classExpectation(["&", "^", "|"], false, false);
  var peg$e62 = peg$literalExpectation("~", false);
  var peg$e63 = peg$literalExpectation("Implies(", false);
  var peg$e64 = peg$literalExpectation("Equivalent(", false);
  var peg$e65 = peg$literalExpectation("True", false);
  var peg$e66 = peg$literalExpectation("False", false);
  var peg$e67 = peg$otherExpectation("greek_letters");
  var peg$e68 = peg$literalExpectation("alpha", false);
  var peg$e69 = peg$literalExpectation("beta", false);
  var peg$e70 = peg$literalExpectation("gamma", false);
  var peg$e71 = peg$literalExpectation("delta", false);
  var peg$e72 = peg$literalExpectation("epsilon", false);
  var peg$e73 = peg$literalExpectation("zeta", false);
  var peg$e74 = peg$literalExpectation("eta", false);
  var peg$e75 = peg$literalExpectation("theta", false);
  var peg$e76 = peg$literalExpectation("iota", false);
  var peg$e77 = peg$literalExpectation("kappa", false);
  var peg$e78 = peg$literalExpectation("lamda", false);
  var peg$e79 = peg$literalExpectation("mu", false);
  var peg$e80 = peg$literalExpectation("nu", false);
  var peg$e81 = peg$literalExpectation("xi", false);
  var peg$e82 = peg$literalExpectation("omicron", false);
  var peg$e83 = peg$literalExpectation("pi", false);
  var peg$e84 = peg$literalExpectation("rho", false);
  var peg$e85 = peg$literalExpectation("sigma", false);
  var peg$e86 = peg$literalExpectation("tau", false);
  var peg$e87 = peg$literalExpectation("upsilon", false);
  var peg$e88 = peg$literalExpectation("phi", false);
  var peg$e89 = peg$literalExpectation("chi", false);
  var peg$e90 = peg$literalExpectation("psi", false);
  var peg$e91 = peg$literalExpectation("omega", false);
  var peg$e92 = peg$literalExpectation("Alpha", false);
  var peg$e93 = peg$literalExpectation("Beta", false);
  var peg$e94 = peg$literalExpectation("Gamma", false);
  var peg$e95 = peg$literalExpectation("Delta", false);
  var peg$e96 = peg$literalExpectation("Epsilon", false);
  var peg$e97 = peg$literalExpectation("Zeta", false);
  var peg$e98 = peg$literalExpectation("Eta", false);
  var peg$e99 = peg$literalExpectation("Theta", false);
  var peg$e100 = peg$literalExpectation("Iota", false);
  var peg$e101 = peg$literalExpectation("Kappa", false);
  var peg$e102 = peg$literalExpectation("Lamda", false);
  var peg$e103 = peg$literalExpectation("Mu", false);
  var peg$e104 = peg$literalExpectation("Nu", false);
  var peg$e105 = peg$literalExpectation("Xi", false);
  var peg$e106 = peg$literalExpectation("Omicron", false);
  var peg$e107 = peg$literalExpectation("Pi", false);
  var peg$e108 = peg$literalExpectation("Rho", false);
  var peg$e109 = peg$literalExpectation("Sigma", false);
  var peg$e110 = peg$literalExpectation("Tau", false);
  var peg$e111 = peg$literalExpectation("Upsilon", false);
  var peg$e112 = peg$literalExpectation("Phi", false);
  var peg$e113 = peg$literalExpectation("Chi", false);
  var peg$e114 = peg$literalExpectation("Psi", false);
  var peg$e115 = peg$literalExpectation("Omega", false);
  var peg$e116 = peg$otherExpectation("special symbols");
  var peg$e117 = peg$literalExpectation("oo", false);
  var peg$e118 = peg$literalExpectation("EmptySet", false);
  var peg$e119 = peg$otherExpectation("int");
  var peg$e120 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e121 = peg$otherExpectation("float");
  var peg$e122 = peg$literalExpectation(".", false);
  var peg$e123 = peg$otherExpectation("var");
  var peg$e124 = peg$otherExpectation("whitespace");
  var peg$e125 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function(head, tail) {
      if (crop && tail.length > 0) {
        return head + tail[0][1] + '...'
      }
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return `${result} + ${element[3]}`; }
        if (element[1] === "-") { return `${result} - ${element[3]}`; }
      }, head);
    };
  var peg$f1 = function(head, tail) {
      if (crop && tail.length > 0) {
        return head + tail[0][1] + '...'
      }
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return `${result} \\cdot ${element[3]}`; }
        if (element[1] === "/") {
            if (flat) { return `${result} / ${element[3]}`; }
            return `\\frac{${result}}{${element[3]}}`;
        }
      }, head);
    };
  var peg$f2 = function(head, tail) {
      if (crop && tail.length > 0) {
        return `${head}^{...}`
      }
      return tail.reduce(function(result, element) {
        return `${result}^{${element[3]}}`;
      }, head);
    };
  var peg$f3 = function(expr) { return brackets.l + expr + brackets.r; };
  var peg$f4 = function(func) {return func};
  var peg$f5 = function(expr) {return '-' + expr};
  var peg$f6 = function(expr) {return brackets.lvert + expr + brackets.rvert};
  var peg$f7 = function(expr) {return brackets.lceil+ expr + brackets.rceil};
  var peg$f8 = function(expr) {return brackets.lfloor + expr + brackets.rfloor};
  var peg$f9 = function(expr) {return brackets.l + expr + brackets.r + '!'};
  var peg$f10 = function(expr) {return brackets.l + expr + brackets.r + '!!'};
  var peg$f11 = function(f, i, a, b) {
        if (flat) {return `${brackets.l} \\sum {}_{${i} = ${a}}^{${b}} \\; ${f}${brackets.r}`}
        return `${brackets.l} \\sum_{${i} = ${a}}^{${b}} ${f}${brackets.r}`
    };
  var peg$f12 = function(f, i, a, b) {
        if (flat) {return `${brackets.l} \\prod {}_{${i} = ${a}}^{${b}} \\; ${f}${brackets.r}`}
        return `${brackets.l} \\prod_{${i} = ${a}}^{${b}} ${f}${brackets.r}`
    };
  var peg$f13 = function(name) {return name};
  var peg$f14 = function() { return `{${text()}}` };
  var peg$f15 = function(expr) {return displaySqrt(undefined, expr)};
  var peg$f16 = function(expr) {return displaySqrt(3, expr)};
  var peg$f17 = function(x, n) {return displaySqrt(n, x)};
  var peg$f18 = function(name, insides) {
        if (crop) {
            return `\\mathrm{${name}}${brackets.l}${insides[0]}${insides.length > 1 ? ', ...' : ''}${brackets.r}`
        }
        return `\\mathrm{${name}}${brackets.l}${insides}${brackets.r}`
    };
  var peg$f19 = function(head, tail) {
      return tail.reduce(function(result, element) {
          if (element[1] === "&") {return `${result} \\wedge ${element[3]}`; }
          if (element[1] === "|") {return `${result} \\vee ${element[3]}`; }
          if (element[1] === "^") {return `${result} \\oplus ${element[3]}`; }
        } , head)
    };
  var peg$f20 = function(expr) { return brackets.l + expr + brackets.r; };
  var peg$f21 = function(expr) { return `\\neg ${expr}`; };
  var peg$f22 = function(expr1, expr2) {return expr1 + "\\implies" + expr2};
  var peg$f23 = function(expr1, expr2) {return expr1 + "\\equiv" + expr2};
  var peg$f24 = function() {return "\\top"};
  var peg$f25 = function() {return "\\bot"};
  var peg$f26 = function(term) {return term};
  var peg$f27 = function(letter) {return `\\${letter}`};
  var peg$f28 = function() {return '\\infty'};
  var peg$f29 = function() {return '\\emptyset'};
  var peg$f30 = function() { return parseInt(text(), 10).toString(); };
  var peg$f31 = function() { return parseFloat(text(), 10).toString(); };
  var peg$f32 = function() { return `{${text()}}` };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseExpression() {
    var s0;

    s0 = peg$parseAddExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLogicalExpr();
    }

    return s0;
  }

  function peg$parseAddExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseMultExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = input.charAt(peg$currPos);
      if (peg$r0.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseMultExpr();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = input.charAt(peg$currPos);
        if (peg$r0.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseMultExpr();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f0(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseMultExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseExpExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseExpExpr();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseExpExpr();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f1(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseExpExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseFactor();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c0) {
        s5 = peg$c0;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseFactor();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s5 = peg$c0;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseFactor();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseFactor() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAddExpr();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c2;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseFunctions();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTerminals();
      }
    }

    return s0;
  }

  function peg$parseFunctions() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseUnarySpecialFunction();
    if (s1 === peg$FAILED) {
      s1 = peg$parseBinarySpecialFunction();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSum();
        if (s1 === peg$FAILED) {
          s1 = peg$parseProduct();
          if (s1 === peg$FAILED) {
            s1 = peg$parseNaryFunction();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUnarySpecialFunction() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c3;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseFactor();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f5(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c1;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseAddExpr();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c2;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f6(s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c5) {
          s1 = peg$c5;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c1;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parseAddExpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f7(s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c6) {
            s1 = peg$c6;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s2 = peg$c1;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              s4 = peg$parseAddExpr();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c2;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f8(s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c7) {
              s1 = peg$c7;
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c1;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                s4 = peg$parseAddExpr();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c2;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f9(s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 10) === peg$c8) {
                s1 = peg$c8;
                peg$currPos += 10;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s2 = peg$c1;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  s4 = peg$parseAddExpr();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s6 = peg$c2;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e7); }
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f10(s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parseSum() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseAddExpr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c10;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s8 = peg$c1;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$parseAddExpr();
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s12 = peg$c10;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e17); }
                }
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse_();
                  s14 = peg$parseAddExpr();
                  if (s14 !== peg$FAILED) {
                    s15 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s16 = peg$c10;
                      peg$currPos++;
                    } else {
                      s16 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e17); }
                    }
                    if (s16 !== peg$FAILED) {
                      s17 = peg$parse_();
                      s18 = peg$parseAddExpr();
                      if (s18 !== peg$FAILED) {
                        s19 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s20 = peg$c2;
                          peg$currPos++;
                        } else {
                          s20 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e7); }
                        }
                        if (s20 !== peg$FAILED) {
                          s21 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s22 = peg$c2;
                            peg$currPos++;
                          } else {
                            s22 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e7); }
                          }
                          if (s22 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f11(s4, s10, s14, s18);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseProduct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseAddExpr();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c10;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
              s8 = peg$c1;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s10 = peg$parseAddExpr();
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                  s12 = peg$c10;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e17); }
                }
                if (s12 !== peg$FAILED) {
                  s13 = peg$parse_();
                  s14 = peg$parseAddExpr();
                  if (s14 !== peg$FAILED) {
                    s15 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s16 = peg$c10;
                      peg$currPos++;
                    } else {
                      s16 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e17); }
                    }
                    if (s16 !== peg$FAILED) {
                      s17 = peg$parse_();
                      s18 = peg$parseAddExpr();
                      if (s18 !== peg$FAILED) {
                        s19 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s20 = peg$c2;
                          peg$currPos++;
                        } else {
                          s20 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e7); }
                        }
                        if (s20 !== peg$FAILED) {
                          s21 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s22 = peg$c2;
                            peg$currPos++;
                          } else {
                            s22 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e7); }
                          }
                          if (s22 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f12(s4, s10, s14, s18);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseFuncNames() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 17) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 17;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c14) {
          s1 = peg$c14;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c16) {
              s1 = peg$c16;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c17) {
                s1 = peg$c17;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e26); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c18) {
                  s1 = peg$c18;
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e27); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c19) {
                    s1 = peg$c19;
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e28); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c20) {
                      s1 = peg$c20;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e29); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c21) {
                        s1 = peg$c21;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e30); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c22) {
                          s1 = peg$c22;
                          peg$currPos += 4;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e31); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c23) {
                            s1 = peg$c23;
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e32); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c24) {
                              s1 = peg$c24;
                              peg$currPos += 4;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e33); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c25) {
                                s1 = peg$c25;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e34); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c26) {
                                  s1 = peg$c26;
                                  peg$currPos += 4;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e35); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c27) {
                                    s1 = peg$c27;
                                    peg$currPos += 4;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e36); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c28) {
                                      s1 = peg$c28;
                                      peg$currPos += 3;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e37); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c29) {
                                        s1 = peg$c29;
                                        peg$currPos += 3;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e38); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c30) {
                                          s1 = peg$c30;
                                          peg$currPos += 3;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e39); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 3) === peg$c31) {
                                            s1 = peg$c31;
                                            peg$currPos += 3;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e40); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 3) === peg$c32) {
                                              s1 = peg$c32;
                                              peg$currPos += 3;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e41); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 2) === peg$c33) {
                                                s1 = peg$c33;
                                                peg$currPos += 2;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e42); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c34) {
                                                  s1 = peg$c34;
                                                  peg$currPos += 2;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e43); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 4) === peg$c35) {
                                                    s1 = peg$c35;
                                                    peg$currPos += 4;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e44); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 3) === peg$c36) {
                                                      s1 = peg$c36;
                                                      peg$currPos += 3;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e45); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 9) === peg$c37) {
                                                        s1 = peg$c37;
                                                        peg$currPos += 9;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e46); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 10) === peg$c38) {
                                                          s1 = peg$c38;
                                                          peg$currPos += 10;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e47); }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 4) === peg$c39) {
                                                            s1 = peg$c39;
                                                            peg$currPos += 4;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e48); }
                                                          }
                                                          if (s1 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 3) === peg$c40) {
                                                              s1 = peg$c40;
                                                              peg$currPos += 3;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e49); }
                                                            }
                                                            if (s1 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 3) === peg$c41) {
                                                                s1 = peg$c41;
                                                                peg$currPos += 3;
                                                              } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e50); }
                                                              }
                                                              if (s1 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 3) === peg$c42) {
                                                                  s1 = peg$c42;
                                                                  peg$currPos += 3;
                                                                } else {
                                                                  s1 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e51); }
                                                                }
                                                                if (s1 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 3) === peg$c43) {
                                                                    s1 = peg$c43;
                                                                    peg$currPos += 3;
                                                                  } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e52); }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseArbFuncNames() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r2.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f14();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parseBinarySpecialFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAddExpr();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c2;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f15(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c45) {
        s1 = peg$c45;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseAddExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c2;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c46) {
          s1 = peg$c46;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseAddExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c10;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e17); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAddExpr();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s8 = peg$c2;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f17(s3, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseNaryFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseFuncNames();
    if (s1 === peg$FAILED) {
      s1 = peg$parseArbFuncNames();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = [];
        s5 = peg$parseAddExpr();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c10;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s6 = peg$parseAddExpr();
            if (s6 === peg$FAILED) {
              peg$currPos = s5;
              s5 = peg$FAILED;
            } else {
              s5 = s6;
            }
          } else {
            s5 = s6;
          }
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parseLogicalExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseLogicalSubExpr();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse_();
      s6 = input.charAt(peg$currPos);
      if (peg$r3.test(s6)) {
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parseLogicalSubExpr();
        if (s8 !== peg$FAILED) {
          s5 = [s5, s6, s7, s8];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = input.charAt(peg$currPos);
        if (peg$r3.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseLogicalSubExpr();
          if (s8 !== peg$FAILED) {
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f19(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parseLogicalSubExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLogicalExpr();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c2;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 126) {
        s1 = peg$c47;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseLogicalExpr();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c48) {
          s1 = peg$c48;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e63); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseLogicalExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c10;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e17); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseLogicalExpr();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s9 = peg$c2;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f22(s3, s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 11) === peg$c49) {
            s1 = peg$c49;
            peg$currPos += 11;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e64); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseLogicalExpr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c10;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e17); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseLogicalExpr();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s9 = peg$c2;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f23(s3, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseTrue();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFalse();
              if (s0 === peg$FAILED) {
                s0 = peg$parseVariable();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTrue() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c50) {
      s2 = peg$c50;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f24();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFalse() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5) === peg$c51) {
      s2 = peg$c51;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f25();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTerminals() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseFloat();
    if (s1 === peg$FAILED) {
      s1 = peg$parseInteger();
      if (s1 === peg$FAILED) {
        s1 = peg$parseGreekLetter();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSpecialSymbol();
          if (s1 === peg$FAILED) {
            s1 = peg$parseVariable();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f26(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGreekLetter() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5) === peg$c52) {
      s2 = peg$c52;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c53) {
        s2 = peg$c53;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c54) {
          s2 = peg$c54;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c55) {
            s2 = peg$c55;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e71); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c56) {
              s2 = peg$c56;
              peg$currPos += 7;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e72); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c57) {
                s2 = peg$c57;
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e73); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c58) {
                  s2 = peg$c58;
                  peg$currPos += 3;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e74); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c59) {
                    s2 = peg$c59;
                    peg$currPos += 5;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e75); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c60) {
                      s2 = peg$c60;
                      peg$currPos += 4;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e76); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c61) {
                        s2 = peg$c61;
                        peg$currPos += 5;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e77); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c62) {
                          s2 = peg$c62;
                          peg$currPos += 5;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e78); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c63) {
                            s2 = peg$c63;
                            peg$currPos += 2;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e79); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c64) {
                              s2 = peg$c64;
                              peg$currPos += 2;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e80); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c65) {
                                s2 = peg$c65;
                                peg$currPos += 2;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e81); }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 7) === peg$c66) {
                                  s2 = peg$c66;
                                  peg$currPos += 7;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e82); }
                                }
                                if (s2 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c67) {
                                    s2 = peg$c67;
                                    peg$currPos += 2;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e83); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c68) {
                                      s2 = peg$c68;
                                      peg$currPos += 3;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e84); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5) === peg$c69) {
                                        s2 = peg$c69;
                                        peg$currPos += 5;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e85); }
                                      }
                                      if (s2 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c70) {
                                          s2 = peg$c70;
                                          peg$currPos += 3;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e86); }
                                        }
                                        if (s2 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 7) === peg$c71) {
                                            s2 = peg$c71;
                                            peg$currPos += 7;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e87); }
                                          }
                                          if (s2 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 3) === peg$c72) {
                                              s2 = peg$c72;
                                              peg$currPos += 3;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e88); }
                                            }
                                            if (s2 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 3) === peg$c73) {
                                                s2 = peg$c73;
                                                peg$currPos += 3;
                                              } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                              }
                                              if (s2 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 3) === peg$c74) {
                                                  s2 = peg$c74;
                                                  peg$currPos += 3;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e90); }
                                                }
                                                if (s2 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 5) === peg$c75) {
                                                    s2 = peg$c75;
                                                    peg$currPos += 5;
                                                  } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e91); }
                                                  }
                                                  if (s2 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 5) === peg$c76) {
                                                      s2 = peg$c76;
                                                      peg$currPos += 5;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e92); }
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c77) {
                                                        s2 = peg$c77;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e93); }
                                                      }
                                                      if (s2 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c78) {
                                                          s2 = peg$c78;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s2 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e94); }
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 5) === peg$c79) {
                                                            s2 = peg$c79;
                                                            peg$currPos += 5;
                                                          } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e95); }
                                                          }
                                                          if (s2 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 7) === peg$c80) {
                                                              s2 = peg$c80;
                                                              peg$currPos += 7;
                                                            } else {
                                                              s2 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$e96); }
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 4) === peg$c81) {
                                                                s2 = peg$c81;
                                                                peg$currPos += 4;
                                                              } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$e97); }
                                                              }
                                                              if (s2 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 3) === peg$c82) {
                                                                  s2 = peg$c82;
                                                                  peg$currPos += 3;
                                                                } else {
                                                                  s2 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e98); }
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 5) === peg$c83) {
                                                                    s2 = peg$c83;
                                                                    peg$currPos += 5;
                                                                  } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$e99); }
                                                                  }
                                                                  if (s2 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 4) === peg$c84) {
                                                                      s2 = peg$c84;
                                                                      peg$currPos += 4;
                                                                    } else {
                                                                      s2 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$e100); }
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 5) === peg$c85) {
                                                                        s2 = peg$c85;
                                                                        peg$currPos += 5;
                                                                      } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$e101); }
                                                                      }
                                                                      if (s2 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 5) === peg$c86) {
                                                                          s2 = peg$c86;
                                                                          peg$currPos += 5;
                                                                        } else {
                                                                          s2 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$e102); }
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 2) === peg$c87) {
                                                                            s2 = peg$c87;
                                                                            peg$currPos += 2;
                                                                          } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$e103); }
                                                                          }
                                                                          if (s2 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 2) === peg$c88) {
                                                                              s2 = peg$c88;
                                                                              peg$currPos += 2;
                                                                            } else {
                                                                              s2 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$e104); }
                                                                            }
                                                                            if (s2 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 2) === peg$c89) {
                                                                                s2 = peg$c89;
                                                                                peg$currPos += 2;
                                                                              } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$e105); }
                                                                              }
                                                                              if (s2 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 7) === peg$c90) {
                                                                                  s2 = peg$c90;
                                                                                  peg$currPos += 7;
                                                                                } else {
                                                                                  s2 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e106); }
                                                                                }
                                                                                if (s2 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 2) === peg$c91) {
                                                                                    s2 = peg$c91;
                                                                                    peg$currPos += 2;
                                                                                  } else {
                                                                                    s2 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e107); }
                                                                                  }
                                                                                  if (s2 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 3) === peg$c92) {
                                                                                      s2 = peg$c92;
                                                                                      peg$currPos += 3;
                                                                                    } else {
                                                                                      s2 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$e108); }
                                                                                    }
                                                                                    if (s2 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 5) === peg$c93) {
                                                                                        s2 = peg$c93;
                                                                                        peg$currPos += 5;
                                                                                      } else {
                                                                                        s2 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$e109); }
                                                                                      }
                                                                                      if (s2 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 3) === peg$c94) {
                                                                                          s2 = peg$c94;
                                                                                          peg$currPos += 3;
                                                                                        } else {
                                                                                          s2 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$e110); }
                                                                                        }
                                                                                        if (s2 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 7) === peg$c95) {
                                                                                            s2 = peg$c95;
                                                                                            peg$currPos += 7;
                                                                                          } else {
                                                                                            s2 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$e111); }
                                                                                          }
                                                                                          if (s2 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 3) === peg$c96) {
                                                                                              s2 = peg$c96;
                                                                                              peg$currPos += 3;
                                                                                            } else {
                                                                                              s2 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$e112); }
                                                                                            }
                                                                                            if (s2 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 3) === peg$c97) {
                                                                                                s2 = peg$c97;
                                                                                                peg$currPos += 3;
                                                                                              } else {
                                                                                                s2 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$e113); }
                                                                                              }
                                                                                              if (s2 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 3) === peg$c98) {
                                                                                                  s2 = peg$c98;
                                                                                                  peg$currPos += 3;
                                                                                                } else {
                                                                                                  s2 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$e114); }
                                                                                                }
                                                                                                if (s2 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 5) === peg$c99) {
                                                                                                    s2 = peg$c99;
                                                                                                    peg$currPos += 5;
                                                                                                  } else {
                                                                                                    s2 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$e115); }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f27(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }

    return s0;
  }

  function peg$parseSpecialSymbol() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c100) {
      s1 = peg$c100;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f28();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c101) {
        s1 = peg$c101;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f29();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r4.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r4.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e120); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f30();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }

    return s0;
  }

  function peg$parseFloat() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r4.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = input.charAt(peg$currPos);
      if (peg$r4.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s3 = peg$c102;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r4.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r4.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e120); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f31();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r2.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f32();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r5.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e124); }

    return s0;
  }


    const flat = options.flat ?? false;
    const crop = options.crop ?? false;
    const brackets = {
        l: flat ? '(' : '\\left(',
        r: flat ? ')' : '\\right)',
        lvert: flat ? '\\lvert' : '\\left\\lvert',
        rvert: flat ? '\\rvert' : '\\right\\rvert',
        lceil: flat ? '\\lceil' : '\\left\\lceil',
        rceil: flat ? '\\rceil' : '\\right\\rceil',
        lfloor: flat ? '\\lfloor' : '\\left\\lfloor',
        rfloor: flat ? '\\rfloor' : '\\right\\rfloor',
    }

    const displaySqrt = function (n, x) {
        if (typeof n === "undefined") {
            return flat ? '\\sqrt{}' + brackets.l + x + brackets.r : ` {\\sqrt{${x}}} `
        }
        return flat ? `\\sqrt[${n}]{}` + brackets.l + x + brackets.r : ` {\\sqrt[${n}]{${x}}} `
    }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  StartRules: ["Expression"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
